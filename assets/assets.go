// Code generated by go-bindata.
// sources:
// assets/raw/Dragonfile.toml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dragonfileToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x56\x4d\x6f\xdb\x46\x10\xbd\xf3\x57\x0c\x94\x03\x2f\x06\x21\xa7\x46\xe3\x16\xd0\x21\x8d\x73\x30\xd0\xd6\x45\x92\x16\x28\x8c\x40\x58\x91\x43\x71\x63\x72\x57\xd8\x5d\x4a\x51\x83\xfc\xf7\xbe\x99\x25\x65\x29\x41\x90\xc0\xb6\x66\x67\xe7\xe3\xbd\x37\xb3\x7a\x41\x5f\xbe\x6c\xcd\xc0\xeb\x64\x53\xcf\x5f\xbf\xd2\xc6\x44\xa6\xda\xbb\xd6\x6e\xc7\x60\x92\xf5\x8e\x5a\xdb\x73\x51\x38\x78\xd1\x8a\x16\x97\xfe\x8b\x62\xcf\x21\x8a\x17\x8e\xae\xab\x65\xb5\x5c\x14\xc5\x77\x41\x1d\xa7\x83\x0f\x4f\x97\x71\xab\xe2\x11\xf6\x8f\x45\x41\xf4\x82\xee\x5d\xe2\xd0\x9a\x9a\xc9\x46\x4a\x1d\x93\x69\x9a\xc0\x31\xd2\xd1\x8f\x74\x30\x2e\xa9\x31\x72\x40\x3a\x4a\x9e\x36\xd6\x35\xf8\x5d\xd1\x6f\x47\x6a\xb8\x35\x63\x9f\xc8\xa6\x32\x6a\xb0\x45\xef\x6b\xd3\x77\x3e\xa6\x05\x6d\x46\x39\xa0\xda\x38\x32\x7d\xc4\x45\x89\x92\x24\xc4\x62\x59\xe9\xbf\x05\x99\x48\x07\xee\x7b\xf2\x81\x8c\xf3\x48\x14\xe8\xfe\xaf\xb9\x02\x8d\x98\xf4\xa2\xa9\x6b\x18\xec\xa6\x67\x6a\x83\x1f\xc8\x8f\x29\xda\x86\xcf\x4a\xab\xe0\x6d\x4f\xad\xac\xce\x2b\xc9\x7d\xbe\xe9\x8c\xdb\xe6\x1b\x3b\x1f\xa4\x2b\x93\xbe\x45\x2b\x8c\x2e\x92\x77\xf0\x57\x97\x15\xdd\x2e\x6f\x97\x3f\xba\x7e\x02\x65\x17\xec\xde\xa4\xc9\x3e\x85\xa8\xe8\x43\x07\x3c\x2f\x8e\xac\x1c\xf4\x47\x0d\x07\x3e\x1c\xd7\xc9\x9c\x3a\x92\x78\x83\xa9\x3b\xeb\x98\xa4\x6a\xeb\xb6\xe7\x39\x0c\x40\x9f\xf8\x91\x18\x20\xe6\x28\xd0\x44\x76\x8d\xc6\x2b\xdf\xbf\x7d\xf7\xcf\xdb\x77\x25\x0d\xc0\xc9\x6c\x39\xca\xa9\x01\xb2\x03\x0f\xbc\x81\x50\xc8\xb7\x7a\x5b\xfa\xad\xe8\x41\xa1\x06\x04\x0e\x3f\x6c\xbc\x52\x06\x73\x3e\x9c\x6b\x44\x50\x33\x15\xa9\xa5\xf8\x7c\x9a\x50\x88\x09\x8d\x36\x54\xa9\xdf\x87\x87\xbb\x87\x5f\xe9\x75\x8c\xa2\x19\xb8\x0b\x4f\xe9\x28\x67\x53\xf3\xeb\x67\x2c\xaf\x45\xa1\x77\xc1\x6c\xbd\xfb\xe3\xef\x3b\x1a\x23\xe7\xa4\xaf\x03\x2c\x2f\x2d\x8a\x4d\x9d\x6f\xa8\x85\x1c\xd8\xd5\xe1\xb8\xd3\xdc\x3b\x13\x23\x44\xdc\xc4\x09\x54\xfc\x37\x13\x00\xc5\x8b\x93\xb2\x33\x37\x68\xd7\x87\x23\x45\xfb\x1f\xcf\x1d\xcf\x91\x30\x29\x82\xa2\x98\x7a\x76\xdb\xd4\xcd\x0e\xad\x75\xa6\x47\x24\x88\x6a\x37\x26\x49\xc2\x98\xc4\xbd\xe9\x47\x94\x67\x02\xbb\x32\x51\x23\xec\x07\x3f\x2a\xae\x4f\xcc\xbb\x13\x58\x04\x24\xf9\x4a\xd5\xde\x32\xf7\x60\x93\xb9\x50\xdd\xd6\x27\xc9\x0c\x15\xdd\x53\x67\xb7\x1d\x98\x0b\x5c\xfb\x61\x60\xad\x04\x0a\x94\x29\x6b\x3c\x89\xf8\xa5\xd7\x83\x45\x5d\x72\x83\x46\xd7\x4f\x53\x88\x68\x9d\xd9\x63\x08\x00\x7f\xf0\x70\x1a\x5d\x03\x46\x85\x0a\xb9\x32\xb7\xd9\xb6\xe0\x4a\x26\xae\x33\x22\x34\x68\xa3\x1e\x83\x52\xf1\xa8\x00\xf8\x69\xe0\x67\x38\xd7\x19\xab\xb5\x62\xb5\xa2\x9b\xe5\x2f\x3f\x5f\x9e\x4f\x28\xad\xe8\xa7\x97\x7a\x30\x58\xb7\xb6\x98\x30\xdd\x21\x51\xec\xd9\x6c\x3e\x5f\x9a\x6f\x85\xe5\xde\x6f\x85\x9a\x64\x2c\x6c\x98\x7b\x61\x12\x7f\xec\xb8\xb6\xad\xad\x67\x3d\xc1\x0b\xb0\x2a\xe1\x3a\x59\xc1\x7f\x92\x26\xe2\x58\x77\x22\x40\x84\xb6\xc3\x38\x4c\xe1\x7a\xde\x03\x5f\xe1\x30\x33\x45\xc9\x84\x2d\xa7\x88\x06\x71\xac\xdd\x65\x17\x4c\x7f\xc3\x9b\x71\x3b\x4d\xfe\x1d\xb7\x32\x55\x12\x62\xba\xa1\xe6\xdf\xe5\xf3\x71\xa7\x3b\x37\xda\x98\x74\x44\x4a\x34\x32\x88\x1e\x4a\x4d\x54\xca\x06\x2e\xaf\xb4\x38\xf5\x3d\x3b\x9f\x7a\xe1\x69\x4f\xcd\x64\xe6\x95\xe9\x35\xdd\x5c\x27\x46\x91\xe6\x8b\x74\xe8\x10\x73\x8a\x8c\x0d\x0a\xe6\x45\x66\x10\x67\x9d\x46\xe8\x50\x82\xc9\x99\xc8\xbc\x0e\x8c\x01\x6a\x74\xd2\x93\x0f\xda\x43\xcc\x63\x77\xdf\x6a\xb6\xba\xf3\x3e\x5e\x94\x65\x54\x33\x21\xb7\x8b\x92\xb5\x78\xa7\x1d\xa8\xa4\x33\xd8\x8a\x83\xec\x66\x0d\x86\x0d\xcb\x56\x57\xc2\x59\x20\xb8\x95\x1c\x82\x0f\xa5\x94\x0c\x42\x06\xb3\x8b\x33\x71\x0f\xef\xa9\x8c\xa9\x41\x83\x13\x50\xf8\x00\xe7\x32\x2b\xc8\xeb\x26\xc6\xbc\x5a\xad\xb2\x44\xe5\x68\x93\x5a\x33\xd8\xde\x9a\x30\xab\x5c\x2a\x6f\x18\x12\xe9\x63\x5e\x40\x1b\x8e\x29\x37\x6b\xeb\x27\xf5\xca\xab\x28\x63\xff\x3d\x3d\x66\x6e\xe4\xf2\x48\x26\xf2\x02\x25\x2c\x9a\x33\x0a\x33\xf2\x3f\x46\x65\xda\xb3\x3b\x73\x5a\x11\x1a\x0b\x80\x2a\x2f\x4a\xb2\x8d\xdd\x4c\x32\xde\x42\x9c\x3f\x8a\x06\xab\x49\x5f\x1f\x55\x8c\x0a\x45\xb0\x83\xc1\x42\x9a\x8b\x53\xb3\x96\x01\x91\xce\xc6\x45\xb6\xe6\xec\x17\x76\x28\xff\xcd\xc5\x7e\x9b\x57\x32\xe6\xdb\x3a\xd4\x3c\xe4\x2f\x0a\x28\xe5\x4f\xf6\x37\x9f\x2a\xfa\x57\x44\x01\x35\x49\xcb\xc6\x1d\xb1\xfd\xf6\x16\x4b\x03\x0b\x27\x21\x98\x7e\x95\x38\xa9\x34\x4b\x45\xdd\xb3\x98\x8f\x13\xd3\x67\x97\x24\x34\x7f\xc6\x2a\xc1\x2b\x76\x10\xc8\xf0\xc0\x39\xcc\xb2\xac\xb8\xe7\xc7\x37\x2f\xe6\xa9\xb8\x93\x48\xe6\xaf\x07\xa8\x25\x68\x66\xe1\x6c\x5e\x2f\x02\x6d\xae\xb9\x78\x6c\x0c\x5e\x42\x7c\xfd\xa9\x1a\x99\x5f\xbf\x93\xc4\x0a\xa1\x19\x85\x26\xa8\x21\xb7\xb9\xa2\x14\x46\x61\x43\x5e\xc8\x6f\x1e\xf9\xd3\x9b\xbd\x78\x75\xf3\xea\x46\x3e\x9f\xd2\xc2\xe6\x24\x93\x3a\xcd\xe9\xcf\x8d\xcf\xa8\xae\xb1\x72\x70\x74\xbd\x2c\xfe\x0f\x00\x00\xff\xff\xb7\x04\x18\xe8\xa0\x09\x00\x00")

func dragonfileTomlBytes() ([]byte, error) {
	return bindataRead(
		_dragonfileToml,
		"Dragonfile.toml",
	)
}

func dragonfileToml() (*asset, error) {
	bytes, err := dragonfileTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Dragonfile.toml", size: 2464, mode: os.FileMode(420), modTime: time.Unix(1487200792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Dragonfile.toml": dragonfileToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Dragonfile.toml": &bintree{dragonfileToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

